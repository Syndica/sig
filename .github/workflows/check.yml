name: check

on:
  push:
    branches: [main, pre-release]
  pull_request:
    branches: [main, pre-release]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup-zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: lint
        run: |
          zig fmt --check src/ build.zig

  check_style:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: check style
        run: python scripts/style.py --check src

  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: setup-zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: test
        run: |
          zig build test -Denable-tsan=true
          zig build test -Denable-tsan=true -Dblockstore=hashmap -Dfilter=ledger

  kcov_test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup-zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: Set up dependencies
        run: sudo apt-get update

      - name: install kcov
        run: |
          wget https://github.com/SimonKagstrom/kcov/releases/download/v42/kcov-amd64.tar.gz
          sudo tar xf kcov-amd64.tar.gz -C /

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3

      - name: run kcov
        run: |
          bash scripts/kcov_test.sh

      - name: print coverage report
        run: |
          python scripts/parse_kcov.py kcov-output/test/coverage.json

  gossip:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: setup-zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0

      - name: build release
        run: zig build -Doptimize=ReleaseSafe
      - name: run gossip
        run: bash scripts/gossip_test.sh 120 # in seconds

  gossip_service_fuzz:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: setup zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0
      - name: build
        run: zig build -Doptimize=ReleaseSafe -Dno-run fuzz
      - name: run
        run: ./zig-out/bin/fuzz gossip_service 19 10000

  gossip_table_fuzz:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: setup zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0
      - name: build
        run: zig build -Doptimize=ReleaseSafe -Dno-run fuzz
      - name: run
        run: ./zig-out/bin/fuzz gossip_table 19 100000

  allocators_fuzz:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{matrix.os}}
    timeout-minutes: 60
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: setup zig
        uses: mlugg/setup-zig@v1
        with:
          version: 0.13.0
      - name: build
        run: zig build -Doptimize=ReleaseSafe -Dno-run fuzz
      - name: run
        run: ./zig-out/bin/fuzz allocators 19 10000

  # benchmarks:
  #   if: ${{ github.ref != 'refs/heads/main' }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   runs-on: ${{matrix.os}}
  #   timeout-minutes: 60
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #     - name: setup zig
  #       uses: mlugg/setup-zig@v1
  #       with:
  #         version: 0.13.0
  #     - name: benchmarks
  #       run: zig build -Doptimize=ReleaseSafe benchmark -- all --metrics

  #     # Download previous benchmark result from cache (if exists)
  #     - name: Download previous benchmark data
  #       uses: actions/cache@v4
  #       with:
  #         path: ./cache
  #         key: ${{ runner.os }}-benchmark

  #     # Run `github-action-benchmark` action
  #     - name: Store benchmark result
  #       uses: benchmark-action/github-action-benchmark@v1
  #       with:
  #         # What benchmark tool the output.txt came from
  #         tool: "customSmallerIsBetter"
  #         # Where the output from the benchmark tool is stored
  #         output-file-path: results/output.json
  #         # Where the previous data file is stored
  #         external-data-json-path: ./cache/benchmark-data.json
  #         # Workflow will fail when an alert happens
  #         fail-on-alert: true
  #         # GitHub API token to make a commit comment
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         # Enable alert commit comment
  #         comment-on-alert: true
  #         # Upload the updated cache file for the next job by actions/cache
  #         # only when running on the main branch
  #         save-data-file: false

  # main_benchmarks:
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   runs-on: ${{matrix.os}}
  #   timeout-minutes: 60
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #     - name: setup zig
  #       uses: mlugg/setup-zig@v1
  #       with:
  #         version: 0.13.0
  #     - name: benchmarks
  #       run: zig build -Doptimize=ReleaseSafe benchmark -- all --metrics

  #     # Download previous benchmark result from cache (if exists)
  #     - name: Download previous benchmark data
  #       uses: actions/cache@v4
  #       with:
  #         path: ./cache
  #         key: ${{ runner.os }}-benchmark

  #     # Run `github-action-benchmark` action
  #     - name: Store benchmark result
  #       uses: benchmark-action/github-action-benchmark@v1
  #       with:
  #         # What benchmark tool the output.txt came from
  #         tool: "customSmallerIsBetter"
  #         # Where the output from the benchmark tool is stored
  #         output-file-path: results/output.json
  #         # Where the previous data file is stored
  #         external-data-json-path: ./cache/benchmark-data.json
  #         # Workflow will fail when an alert happens
  #         fail-on-alert: true
  #         # Upload the updated cache file for the next job by actions/cache
  #         # only when running on the main branch (see if:)
  #         save-data-file: true
