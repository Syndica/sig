const std = @import("std");
const sig = @import("../sig.zig");

const Pubkey = sig.core.Pubkey;
const AccountSharedData = sig.runtime.AccountSharedData;
const Transaction = sig.core.Transaction;
const InstructionInfo = sig.runtime.InstructionInfo;
const InstructionAccount = sig.core.instruction.InstructionAccount;

const ResolvedTransaction = sig.replay.resolve_lookup.ResolvedTransaction;
// const ResolvedTransactionSerializable = sig.replay.resolve_lookup.ResolvedTransactionSerializable;
// const SvmGatewayParamsSerializable = sig.replay.svm_gateway.SvmGatewayParamsSerializable;

const HashMap = std.AutoArrayHashMapUnmanaged;
const ArrayList = std.ArrayListUnmanaged;
const RwMux = sig.sync.RwMux;

const Hash = sig.core.Hash;
const Slot = sig.core.Slot;

// StatusCache is only used with <Result<(), TransactionError>>
const T = ?sig.ledger.transaction_status.TransactionError;

const Ancestors = sig.core.Ancestors;
const BlockhashQueue = sig.core.BlockhashQueue;
const RentCollector = sig.core.rent_collector.RentCollector;

const FeatureSet = sig.core.FeatureSet;
const TransactionExecutionEnvironment =
    sig.runtime.transaction_execution.TransactionExecutionEnvironment;

pub const ResolvedTransactionSerializable = struct {
    transaction: Transaction,
    account_pubkeys: []const sig.core.Pubkey,
    account_is_writable: []const bool,
    account_is_signer: []const bool,
    instructions: []const InstructionInfo,

    pub fn toResolvedTransaction(self: ResolvedTransactionSerializable, allocator: std.mem.Allocator) !ResolvedTransaction {
        var accounts = std.MultiArrayList(InstructionAccount){};
        errdefer accounts.deinit(allocator);
        for (self.account_pubkeys, 0..) |pubkey, i| {
            try accounts.append(allocator, .{
                .pubkey = pubkey,
                .is_writable = self.account_is_writable[i],
                .is_signer = self.account_is_signer[i],
            });
        }
        allocator.free(self.account_pubkeys);
        allocator.free(self.account_is_writable);
        allocator.free(self.account_is_signer);
        return ResolvedTransaction{
            .transaction = self.transaction,
            .accounts = accounts,
            .instructions = self.instructions,
        };
    }
};

pub const SvmGatewayParamsSerializable = struct {
    // Simple inputs to copy into the svm
    slot: u64,
    max_age: u64,
    lamports_per_signature: u64,

    // Borrowed values to pass by reference into the SVM.
    blockhash_queue: BlockhashQueue,
    ancestors: *const Ancestors,
    feature_set: FeatureSet,
    rent_collector: *const RentCollector,
    // epoch_stakes: *const sig.core.EpochStakes,
    // status_cache: *StatusCache,
};

const Fork = struct { slot: Slot, maybe_err: T = null };

/// This is internally locking and thread safe.
/// [agave] https://github.com/anza-xyz/agave/blob/b6eacb135037ab1021683d28b67a3c60e9039010/runtime/src/status_cache.rs#L39
pub const StatusCache = struct {
    cache: RwMux(HashMap(Hash, HighestFork)),

    roots: RwMux(HashMap(Slot, void)),
    min_root: std.atomic.Value(Slot),

    /// all keys seen during a fork/slot
    // slot_deltas: RwMux(HashMap(Slot, StatusKv)),

    const CACHED_KEY_SIZE = 20;
    const Key = [CACHED_KEY_SIZE]u8;
    const ForkStatus = ArrayList(Fork);

    const StatusValues = ArrayList(struct { key: Key, maybe_err: T = null });
    const StatusKv = HashMap(Hash, struct { key_index: usize, status: StatusValues });
    const KeyMap = HashMap(Key, ForkStatus);

    const HighestFork = struct { slot: Slot, index: usize, key_map: KeyMap };
};

test "bad-transaction" {
    // const allocator = std.testing.allocator;
    const allocator = std.heap.page_allocator;

    const transactions_serializable_bytes = try std.fs.cwd().readFileAlloc(allocator, "validator/ds-txn-batch.bin", 1024 * 1024 * 100);
    defer allocator.free(transactions_serializable_bytes);
    const transactions_serializable = try sig.bincode.readFromSlice(allocator, []ResolvedTransactionSerializable, transactions_serializable_bytes, .{});
    defer allocator.free(transactions_serializable);

    const transaction = try transactions_serializable[0].toResolvedTransaction(allocator);
    defer transaction.deinit(allocator);
    std.debug.print("{any}\n", .{transaction});

    const svm_gateway_serializable_bytes = try std.fs.cwd().readFileAlloc(allocator, "validator/ds-svm-gateway.bin", 1024 * 1024 * 1000);
    defer allocator.free(svm_gateway_serializable_bytes);
    const svm_gateway_serializable = try sig.bincode.readFromSlice(allocator, SvmGatewayParamsSerializable, svm_gateway_serializable_bytes, .{});
    _ = svm_gateway_serializable;

    // const batch_accounts_bytes = try std.fs.cwd().readFileAlloc(allocator, "validator/ds-batch-accounts-cache.bin", 1024 * 1024 * 100);
    // defer allocator.free(batch_accounts_bytes);
    // const batch_accounts = try sig.bincode.readFromSlice(allocator, std.AutoArrayHashMapUnmanaged(Pubkey, AccountSharedData), batch_accounts_bytes, .{});
    // _ = batch_accounts;

    // var accounts_db = try sig.accounts_db.AccountsDB.initForTest(allocator);
    // defer accounts_db.deinit(allocator);
}

// { 1, 0, 0, 0, 0, 0, 0, 0, 1, 155, 87, 32, 223, 129, 117, 229, 211, 253, 25, 4, 87, 248, 101, 175, 208, 252, 84, 33, 26, 139, 231, 160, 168, 5, 101, 229, 82, 6, 40, 202, 102, 30, 192, 249, 188, 158, 62, 213, 190, 41, 196, 41, 42, 238, 243, 75, 189, 76, 90, 219, 158, 130, 91, 173, 235, 84, 62, 161, 156, 157, 127, 204, 0, 128, 1, 0, 6, 14, 69, 194, 105, 15, 185, 208, 236, 14, 84, 140, 152, 139, 94, 172, 27, 33, 255, 78, 202, 172, 70, 184, 121, 32, 90, 56, 175, 188, 168, 82, 168, 222, 20, 88, 152, 7, 137, 134, 165, 173, 129, 171, 162, 69, 217, 115, 213, 202, 150, 43, 59, 21, 139, 72, 22, 224, 112, 142, 184, 129, 182, 212, 86, 247, 28, 114, 129, 159, 43, 49, 150, 40, 77, 183, 38, 250, 239, 67, 62, 53, 181, 71, 135, 70, 159, 88, 64, 50, 100, 195, 106, 223, 233, 211, 227, 179, 161, 130, 196, 60, 93, 68, 170, 211, 126, 158, 71, 9, 134, 253, 16, 67, 150, 103, 132, 103, 125, 153, 218, 163, 161, 72, 86, 36, 63, 9, 141, 39, 167, 205, 217, 27, 101, 95, 133, 97, 33, 100, 129, 109, 116, 140, 216, 129, 5, 229, 1, 85, 119, 151, 78, 250, 82, 211, 28, 191, 242, 94, 177, 164, 202, 218, 201, 239, 208, 158, 153, 150, 156, 135, 143, 166, 228, 55, 157, 194, 84, 225, 214, 18, 95, 128, 103, 34, 46, 122, 208, 128, 181, 91, 24, 172, 218, 208, 183, 151, 57, 203, 88, 33, 157, 102, 177, 86, 250, 127, 156, 147, 126, 77, 55, 245, 6, 21, 86, 89, 214, 228, 168, 183, 7, 101, 176, 177, 248, 160, 244, 97, 158, 163, 151, 6, 77, 98, 107, 101, 204, 228, 107, 160, 108, 212, 114, 115, 17, 157, 73, 38, 17, 102, 30, 92, 157, 26, 224, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 150, 0, 223, 85, 124, 35, 192, 1, 32, 133, 140, 164, 228, 194, 31, 51, 55, 77, 64, 175, 87, 204, 179, 30, 175, 41, 40, 141, 230, 218, 66, 3, 125, 70, 214, 124, 147, 251, 190, 18, 249, 66, 143, 131, 141, 64, 255, 5, 112, 116, 73, 39, 244, 138, 100, 252, 202, 112, 68, 128, 0, 0, 0, 198, 27, 28, 2, 37, 236, 21, 177, 94, 200, 67, 113, 65, 152, 82, 131, 48, 81, 45, 74, 136, 82, 123, 27, 143, 245, 104, 197, 10, 80, 66, 212, 6, 167, 213, 23, 24, 123, 209, 102, 53, 218, 212, 4, 85, 253, 194, 192, 193, 36, 198, 143, 33, 86, 117, 165, 219, 186, 203, 95, 8, 0, 0, 0, 6, 221, 246, 225, 238, 117, 143, 222, 24, 66, 93, 188, 228, 108, 205, 218, 182, 26, 252, 77, 131, 185, 13, 39, 254, 189, 249, 40, 216, 161, 139, 252, 124, 189, 130, 14, 159, 69, 151, 184, 219, 141, 237, 150, 6, 240, 160, 25, 194, 12, 136, 193, 167, 98, 98, 230, 35, 216, 186, 57, 105, 187, 17, 188, 2, 10, 0, 161, 1, 1, 0, 16, 0, 255, 255, 80, 0, 255, 255, 112, 0, 49, 0, 255, 255, 39, 102, 174, 202, 179, 46, 241, 130, 81, 38, 137, 231, 59, 245, 115, 216, 180, 43, 52, 200, 123, 233, 64, 93, 84, 178, 169, 15, 204, 206, 161, 44, 46, 115, 188, 213, 10, 58, 239, 66, 80, 223, 51, 126, 117, 198, 134, 183, 112, 52, 219, 109, 20, 126, 114, 230, 208, 110, 17, 136, 147, 80, 25, 1, 226, 165, 46, 121, 33, 247, 40, 127, 191, 206, 215, 208, 93, 158, 23, 65, 198, 40, 49, 149, 74, 238, 3, 35, 142, 120, 76, 79, 169, 151, 207, 215, 49, 124, 53, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 124, 48, 50, 56, 100, 50, 51, 51, 97, 102, 53, 52, 55, 52, 51, 48, 55, 97, 53, 51, 55, 98, 50, 48, 48, 53, 100, 56, 54, 54, 56, 101, 51, 11, 12, 9, 0, 2, 1, 7, 6, 4, 5, 3, 8, 13, 12, 120, 231, 46, 227, 123, 117, 212, 219, 247, 32, 0, 0, 0, 48, 50, 56, 100, 50, 51, 51, 97, 102, 53, 52, 55, 52, 51, 48, 55, 97, 53, 51, 55, 98, 50, 48, 48, 53, 100, 56, 54, 54, 56, 101, 51, 0, 32, 61, 136, 121, 45, 0, 0, 64, 0, 0, 0, 39, 102, 174, 202, 179, 46, 241, 130, 81, 38, 137, 231, 59, 245, 115, 216, 180, 43, 52, 200, 123, 233, 64, 93, 84, 178, 169, 15, 204, 206, 161, 44, 46, 115, 188, 213, 10, 58, 239, 66, 80, 223, 51, 126, 117, 198, 134, 183, 112, 52, 219, 109, 20, 126, 114, 230, 208, 110, 17, 136, 147, 80, 25, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 69, 194, 105, 15, 185, 208, 236, 14, 84, 140, 152, 139, 94, 172, 27, 33, 255, 78, 202, 172, 70, 184, 121, 32, 90, 56, 175, 188, 168, 82, 168, 222, 20, 88, 152, 7, 137, 134, 165, 173, 129, 171, 162, 69, 217, 115, 213, 202, 150, 43, 59, 21, 139, 72, 22, 224, 112, 142, 184, 129, 182, 212, 86, 247, 28, 114, 129, 159, 43, 49, 150, 40, 77, 183, 38, 250, 239, 67, 62, 53, 181, 71, 135, 70, 159, 88, 64, 50, 100, 195, 106, 223, 233, 211, 227, 179, 161, 130, 196, 60, 93, 68, 170, 211, 126, 158, 71, 9, 134, 253, 16, 67, 150, 103, 132, 103, 125, 153, 218, 163, 161, 72, 86, 36, 63, 9, 141, 39, 167, 205, 217, 27, 101, 95, 133, 97, 33, 100, 129, 109, 116, 140, 216, 129, 5, 229, 1, 85, 119, 151, 78, 250, 82, 211, 28, 191, 242, 94, 177, 164, 202, 218, 201, 239, 208, 158, 153, 150, 156, 135, 143, 166, 228, 55, 157, 194, 84, 225, 214, 18, 95, 128, 103, 34, 46, 122, 208, 128, 181, 91, 24, 172, 218, 208, 183, 151, 57, 203, 88, 33, 157, 102, 177, 86, 250, 127, 156, 147, 126, 77, 55, 245, 6, 21, 86, 89, 214, 228, 168, 183, 7, 101, 176, 177, 248, 160, 244, 97, 158, 163, 151, 6, 77, 98, 107, 101, 204, 228, 107, 160, 108, 212, 114, 115, 17, 157, 73, 38, 17, 102, 30, 92, 157, 26, 224, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 150, 0, 223, 85, 124, 35, 192, 1, 32, 133, 140, 164, 228, 194, 31, 51, 55, 77, 64, 175, 87, 204, 179, 30, 175, 41, 40, 141, 230, 218, 66, 3, 125, 70, 214, 124, 147, 251, 190, 18, 249, 66, 143, 131, 141, 64, 255, 5, 112, 116, 73, 39, 244, 138, 100, 252, 202, 112, 68, 128, 0, 0, 0, 198, 27, 28, 2, 37, 236, 21, 177, 94, 200, 67, 113, 65, 152, 82, 131, 48, 81, 45, 74, 136, 82, 123, 27, 143, 245, 104, 197, 10, 80, 66, 212, 6, 167, 213, 23, 24, 123, 209, 102, 53, 218, 212, 4, 85, 253, 194, 192, 193, 36, 198, 143, 33, 86, 117, 165, 219, 186, 203, 95, 8, 0, 0, 0, 6, 221, 246, 225, 238, 117, 143, 222, 24, 66, 93, 188, 228, 108, 205, 218, 182, 26, 252, 77, 131, 185, 13, 39, 254, 189, 249, 40, 216, 161, 139, 252, 14, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 125, 70, 214, 124, 147, 251, 190, 18, 249, 66, 143, 131, 141, 64, 255, 5, 112, 116, 73, 39, 244, 138, 100, 252, 202, 112, 68, 128, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 161, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 0, 255, 255, 80, 0, 255, 255, 112, 0, 49, 0, 255, 255, 39, 102, 174, 202, 179, 46, 241, 130, 81, 38, 137, 231, 59, 245, 115, 216, 180, 43, 52, 200, 123, 233, 64, 93, 84, 178, 169, 15, 204, 206, 161, 44, 46, 115, 188, 213, 10, 58, 239, 66, 80, 223, 51, 126, 117, 198, 134, 183, 112, 52, 219, 109, 20, 126, 114, 230, 208, 110, 17, 136, 147, 80, 25, 1, 226, 165, 46, 121, 33, 247, 40, 127, 191, 206, 215, 208, 93, 158, 23, 65, 198, 40, 49, 149, 74, 238, 3, 35, 142, 120, 76, 79, 169, 151, 207, 215, 49, 124, 53, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 124, 48, 50, 56, 100, 50, 51, 51, 97, 102, 53, 52, 55, 52, 51, 48, 55, 97, 53, 51, 55, 98, 50, 48, 48, 53, 100, 56, 54, 54, 56, 101, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 27, 28, 2, 37, 236, 21, 177, 94, 200, 67, 113, 65, 152, 82, 131, 48, 81, 45, 74, 136, 82, 123, 27, 143, 245, 104, 197, 10, 80, 66, 212, 11, 0, 12, 0, 0, 0, 0, 0, 0, 0, 114, 150, 0, 223, 85, 124, 35, 192, 1, 32, 133, 140, 164, 228, 194, 31, 51, 55, 77, 64, 175, 87, 204, 179, 30, 175, 41, 40, 141, 230, 218, 66, 9, 0, 0, 0, 69, 194, 105, 15, 185, 208, 236, 14, 84, 140, 152, 139, 94, 172, 27, 33, 255, 78, 202, 172, 70, 184, 121, 32, 90, 56, 175, 188, 168, 82, 168, 222, 0, 0, 1, 1, 28, 114, 129, 159, 43, 49, 150, 40, 77, 183, 38, 250, 239, 67, 62, 53, 181, 71, 135, 70, 159, 88, 64, 50, 100, 195, 106, 223, 233, 211, 227, 179, 2, 0, 0, 1, 20, 88, 152, 7, 137, 134, 165, 173, 129, 171, 162, 69, 217, 115, 213, 202, 150, 43, 59, 21, 139, 72, 22, 224, 112, 142, 184, 129, 182, 212, 86, 247, 1, 0, 0, 1, 248, 160, 244, 97, 158, 163, 151, 6, 77, 98, 107, 101, 204, 228, 107, 160, 108, 212, 114, 115, 17, 157, 73, 38, 17, 102, 30, 92, 157, 26, 224, 67, 7, 0, 0, 1, 218, 208, 183, 151, 57, 203, 88, 33, 157, 102, 177, 86, 250, 127, 156, 147, 126, 77, 55, 245, 6, 21, 86, 89, 214, 228, 168, 183, 7, 101, 176, 177, 6, 0, 0, 1, 167, 205, 217, 27, 101, 95, 133, 97, 33, 100, 129, 109, 116, 140, 216, 129, 5, 229, 1, 85, 119, 151, 78, 250, 82, 211, 28, 191, 242, 94, 177, 164, 4, 0, 0, 1, 202, 218, 201, 239, 208, 158, 153, 150, 156, 135, 143, 166, 228, 55, 157, 194, 84, 225, 214, 18, 95, 128, 103, 34, 46, 122, 208, 128, 181, 91, 24, 172, 5, 0, 0, 1, 161, 130, 196, 60, 93, 68, 170, 211, 126, 158, 71, 9, 134, 253, 16, 67, 150, 103, 132, 103, 125, 153, 218, 163, 161, 72, 86, 36, 63, 9, 141, 39, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 221, 246, 225, 238, 117, 143, 222, 24, 66, 93, 188, 228, 108, 205, 218, 182, 26, 252, 77, 131, 185, 13, 39, 254, 189, 249, 40, 216, 161, 139, 252, 13, 0, 0, 0, 6, 167, 213, 23, 24, 123, 209, 102, 53, 218, 212, 4, 85, 253, 194, 192, 193, 36, 198, 143, 33, 86, 117, 165, 219, 186, 203, 95, 8, 0, 0, 0, 12, 0, 0, 0, 1, 3, 2, 8, 6, 7, 5, 4, 9, 0, 255, 255, 11, 10, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 120, 0, 0, 0, 0, 0, 0, 0, 231, 46, 227, 123, 117, 212, 219, 247, 32, 0, 0, 0, 48, 50, 56, 100, 50, 51, 51, 97, 102, 53, 52, 55, 52, 51, 48, 55, 97, 53, 51, 55, 98, 50, 48, 48, 53, 100, 56, 54, 54, 56, 101, 51, 0, 32, 61, 136, 121, 45, 0, 0, 64, 0, 0, 0, 39, 102, 174, 202, 179, 46, 241, 130, 81, 38, 137, 231, 59, 245, 115, 216, 180, 43, 52, 200, 123, 233, 64, 93, 84, 178, 169, 15, 204, 206, 161, 44, 46, 115, 188, 213, 10, 58, 239, 66, 80, 223, 51, 126, 117, 198, 134, 183, 112, 52, 219, 109, 20, 126, 114, 230, 208, 110, 17, 136, 147, 80, 25, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
